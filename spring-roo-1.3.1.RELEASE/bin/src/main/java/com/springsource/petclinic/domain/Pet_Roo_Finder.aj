// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.springsource.petclinic.domain;

import com.springsource.petclinic.domain.Owner;
import com.springsource.petclinic.domain.Pet;
import com.springsource.petclinic.reference.PetType;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Pet_Roo_Finder {
    
    public static Long Pet.countFindPetsByNameAndWeigth(String name, float weigth) {
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        EntityManager em = Pet.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Pet AS o WHERE o.name = :name AND o.weigth = :weigth", Long.class);
        q.setParameter("name", name);
        q.setParameter("weigth", weigth);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Pet.countFindPetsByOwner(Owner owner) {
        if (owner == null) throw new IllegalArgumentException("The owner argument is required");
        EntityManager em = Pet.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Pet AS o WHERE o.owner = :owner", Long.class);
        q.setParameter("owner", owner);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Pet.countFindPetsBySendRemindersAndWeigthLessThan(boolean sendReminders, float weigth) {
        EntityManager em = Pet.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Pet AS o WHERE o.sendReminders = :sendReminders AND o.weigth < :weigth", Long.class);
        q.setParameter("sendReminders", sendReminders);
        q.setParameter("weigth", weigth);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Pet.countFindPetsByTypeAndNameLike(PetType type, String name) {
        if (type == null) throw new IllegalArgumentException("The type argument is required");
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        name = name.replace('*', '%');
        if (name.charAt(0) != '%') {
            name = "%" + name;
        }
        if (name.charAt(name.length() - 1) != '%') {
            name = name + "%";
        }
        EntityManager em = Pet.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Pet AS o WHERE o.type = :type AND LOWER(o.name) LIKE LOWER(:name)", Long.class);
        q.setParameter("type", type);
        q.setParameter("name", name);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Pet> Pet.findPetsByNameAndWeigth(String name, float weigth) {
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        EntityManager em = Pet.entityManager();
        TypedQuery<Pet> q = em.createQuery("SELECT o FROM Pet AS o WHERE o.name = :name AND o.weigth = :weigth", Pet.class);
        q.setParameter("name", name);
        q.setParameter("weigth", weigth);
        return q;
    }
    
    public static TypedQuery<Pet> Pet.findPetsByNameAndWeigth(String name, float weigth, String sortFieldName, String sortOrder) {
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        EntityManager em = Pet.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Pet AS o WHERE o.name = :name AND o.weigth = :weigth");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Pet> q = em.createQuery(queryBuilder.toString(), Pet.class);
        q.setParameter("name", name);
        q.setParameter("weigth", weigth);
        return q;
    }
    
    public static TypedQuery<Pet> Pet.findPetsByOwner(Owner owner) {
        if (owner == null) throw new IllegalArgumentException("The owner argument is required");
        EntityManager em = Pet.entityManager();
        TypedQuery<Pet> q = em.createQuery("SELECT o FROM Pet AS o WHERE o.owner = :owner", Pet.class);
        q.setParameter("owner", owner);
        return q;
    }
    
    public static TypedQuery<Pet> Pet.findPetsByOwner(Owner owner, String sortFieldName, String sortOrder) {
        if (owner == null) throw new IllegalArgumentException("The owner argument is required");
        EntityManager em = Pet.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Pet AS o WHERE o.owner = :owner");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Pet> q = em.createQuery(queryBuilder.toString(), Pet.class);
        q.setParameter("owner", owner);
        return q;
    }
    
    public static TypedQuery<Pet> Pet.findPetsBySendRemindersAndWeigthLessThan(boolean sendReminders, float weigth) {
        EntityManager em = Pet.entityManager();
        TypedQuery<Pet> q = em.createQuery("SELECT o FROM Pet AS o WHERE o.sendReminders = :sendReminders AND o.weigth < :weigth", Pet.class);
        q.setParameter("sendReminders", sendReminders);
        q.setParameter("weigth", weigth);
        return q;
    }
    
    public static TypedQuery<Pet> Pet.findPetsBySendRemindersAndWeigthLessThan(boolean sendReminders, float weigth, String sortFieldName, String sortOrder) {
        EntityManager em = Pet.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Pet AS o WHERE o.sendReminders = :sendReminders AND o.weigth < :weigth");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Pet> q = em.createQuery(queryBuilder.toString(), Pet.class);
        q.setParameter("sendReminders", sendReminders);
        q.setParameter("weigth", weigth);
        return q;
    }
    
    public static TypedQuery<Pet> Pet.findPetsByTypeAndNameLike(PetType type, String name) {
        if (type == null) throw new IllegalArgumentException("The type argument is required");
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        name = name.replace('*', '%');
        if (name.charAt(0) != '%') {
            name = "%" + name;
        }
        if (name.charAt(name.length() - 1) != '%') {
            name = name + "%";
        }
        EntityManager em = Pet.entityManager();
        TypedQuery<Pet> q = em.createQuery("SELECT o FROM Pet AS o WHERE o.type = :type AND LOWER(o.name) LIKE LOWER(:name)", Pet.class);
        q.setParameter("type", type);
        q.setParameter("name", name);
        return q;
    }
    
    public static TypedQuery<Pet> Pet.findPetsByTypeAndNameLike(PetType type, String name, String sortFieldName, String sortOrder) {
        if (type == null) throw new IllegalArgumentException("The type argument is required");
        if (name == null || name.length() == 0) throw new IllegalArgumentException("The name argument is required");
        name = name.replace('*', '%');
        if (name.charAt(0) != '%') {
            name = "%" + name;
        }
        if (name.charAt(name.length() - 1) != '%') {
            name = name + "%";
        }
        EntityManager em = Pet.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Pet AS o WHERE o.type = :type AND LOWER(o.name) LIKE LOWER(:name)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Pet> q = em.createQuery(queryBuilder.toString(), Pet.class);
        q.setParameter("type", type);
        q.setParameter("name", name);
        return q;
    }
    
}
